[
    {
        "language": "javascript",
        "questionType": "single-answer",
        "questionStatement": "What is the result of the expression `NaN === NaN`?",
        "code": "",
        "options": ["true", "false", "I don't know", "None of the Above"],
        "correctAnswer": "false",
        "explanation": "NaN is never equal to any value even to itself. It is agreed that not all computations that results to NaN are the same",
        "reference": "[JavaScript: The Definitive Guide by David Flanagan strict equality]()",
        "githubHandle": "[Mckenney17](https://github.com/Mckenney17)",
        "twitterHandle": "[McKenney'20](https://twitter.com/Oluwarinolasam2)"
    },
    {
        "language": "javascript",
        "questionType": "single-answer",
        "questionStatement": "What is the output of these code?",
        "code": "console.log(5 + '5');\nconsole.log(5 + 5);",
        "options": ["10, 55", "55, 10", "55, 55", "10, 10"],
        "correctAnswer": "55, 10",
        "explanation": "If either or both operands of the **+ operator** is *a string*, it performs **concatenation**",
        "reference": "[JavaScript: The Definitive Guide by David Flanagan plus operator]()",
        "githubHandle": "[Mckenney17](https://github.com/Mckenney17)",
        "twitterHandle": "[McKenney'20](https://twitter.com/Oluwarinolasam2)"
    },
    {
        "language": "javascript",
        "questionType": "single-answer",
        "questionStatement": "Which of these are **Primitive Types** in JavaScript",
        "code": "",
        "options": ["String, Number, undefined", "Array, null, Number", "Boolean, Object, null", "Function, undefined, Symbol"],
        "correctAnswer": "String, Number, undefined",
        "explanation": "**Primitive Types** in JavaScript are: Number, String, undefined, null, Symbol, BigInt",
        "reference": "[MDN: Data Structures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures)",
        "githubHandle": "[Mckenney17](https://github.com/Mckenney17)",
        "twitterHandle": "[McKenney'20](https://twitter.com/Oluwarinolasam2)"
    },
    {
        "language": "javascript",
        "questionType": "single-answer",
        "questionStatement": "Which of the following is a **Membership test** operator?",
        "code": "",
        "options": ["in", "==", "===", "&&"],
        "correctAnswer": "in",
        "explanation": "The **in** operator is used to test, if left operand(property) is present in the right operand(object)",
        "reference": "[JavaScript: in operator]()",
        "githubHandle": "[Mckenney17](https://github.com/Mckenney17)",
        "twitterHandle": "[McKenney'20](https://twitter.com/Oluwarinolasam2)"
    },
    {
        "language": "javascript",
        "questionType": "multiple-answers",
        "questionStatement": "Choose from the following the **properties of the global object**",
        "code": "",
        "options": ["undefined", "null", "NaN", "Infinity"],
        "correctAnswer": ["undefined", "NaN", "Infinity"],
        "explanation": "**undefined, NaN, Infinity** are properties of the **Window Object**",
        "reference": "[JavaScript: properties of the global object]()",
        "githubHandle": "[Mckenney17](https://github.com/Mckenney17)",
        "twitterHandle": "[McKenney'20](https://twitter.com/Oluwarinolasam2)"
    },
    {
        "language": "javascript",
        "questionType": "single-answer",
        "questionStatement": "What is the output of this code?",
        "code": "console.log(NaN == NaN || 2 && '' || [] && null);",
        "options": ["NaN", "2", "''", "null"],
        "correctAnswer": "null",
        "explanation": "The **||** logical operator selects the *truthy value* of its operands, while the **&&** logical operator selects the *falsy value* of its operands",
        "reference": "[JavaScript: The Definitive Guide by David Flanagan Logical Operators]()",
        "githubHandle": "[Mckenney17](https://github.com/Mckenney17)",
        "twitterHandle": "[McKenney'20](https://twitter.com/Oluwarinolasam2)"
    },
    {
        "language": "javascript",
        "questionType": "single-answer",
        "questionStatement": "What is the output of this code?",
        "code": "function func(y) {\n    var x = 2 + 3;\n    return x && y;\n}\nconsole.log(func(23));",
        "options": ["undefined", "5", "Error", "23"],
        "correctAnswer": "23",
        "explanation": "If the left operand of the **&&** operator is a *truthy value*, it returns the right operand not considering whether it is truthy or falsy.",
        "reference": "[JavaScript: The Definitive Guide by David Flanagan Logical Operators]()",
        "githubHandle": "[Mckenney17](https://github.com/Mckenney17)",
        "twitterHandle": "[McKenney'20](https://twitter.com/Oluwarinolasam2)"
    },
    {
        "language": "javascript",
        "questionType": "single-answer",
        "questionStatement": "What is the result of the code below?",
        "code": "let myArray = ['one', 2, 'seven'];\n\nmyArray.unshift('fumble');\n\nconsole.log(myArray);",
        "options": ["['one', 2, 'seven', 'fumble']","['fumble', 'one', 2, 'seven']","['one', 2]","[2, 'seven']"],
        "correctAnswer": "['fumble', 'one', 2, 'seven']",
        "explanation": "The unshift() method of an array adds one or more elements to the beginning of an array.",
        "reference": "[freeCodeCamp](https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/manipulate-arrays-with-unshift)",
        "githubHandle": "[SamSaias](https://github.com/SamSaias)",
        "twitterHandle": "[WebDevPrin](https://twitter.com/WebDevPrin)"
    },
    {
        "language": "python",
        "questionType": "single-answer",
        "questionStatement": "In Python, **Types** that are **positionally ordered** collection of other objects are known as?",
        "code": "",
        "options": ["Sequence Types", "Ordered Types", "Immutable Types", "Iterables"],
        "correctAnswer": "Sequence Types",
        "explanation": "Sequence Types are positionally ordered and you can perform common operations on them, such as, **Indexing** and **Slicing**",
        "reference": "[Learning Python by Mark Lutz: Sequence Types]()",
        "githubHandle": "[Mckenney17](https://github.com/Mckenney17)",
        "twitterHandle": "[McKenney'20](https://twitter.com/Oluwarinolasam2)"
    },
    {
        "language": "python",
        "questionType": "single-answer",
        "questionStatement": "What is the output of this code?",
        "code": "items = { 1, 2, 3, 4 }\nprint(items[2])",
        "options": ["4", "2", "Error", "None"],
        "correctAnswer": "Error",
        "explanation": "`items` references a **Set** object type, Sets are not Sequence Types, therefore don't support indexing",
        "reference": "[Learning Python by Mark Lutz: Sequence Types]()",
        "githubHandle": "[Mckenney17](https://github.com/Mckenney17)",
        "twitterHandle": "[McKenney'20](https://twitter.com/Oluwarinolasam2)"
    },
    {
        "language": "python",
        "questionType": "single-answer",
        "questionStatement": "Python is **dynamically typed** means?",
        "code": "",
        "options": ["You don't need to declare variables", "You don't need to assign variables on declaration", "Variables are declared on assignment", "None"],
        "correctAnswer": "You don't need to declare variables",
        "explanation": "You don't need to declare variables in Python means Python is dynamically typed",
        "reference": "[Learning Python by Mark Lutz: Python is dynamically typed]()",
        "githubHandle": "[Mckenney17](https://github.com/Mckenney17)",
        "twitterHandle": "[McKenney'20](https://twitter.com/Oluwarinolasam2)"
    },
    {
        "language": "python",
        "questionType": "multiple-answers",
        "questionStatement": "Select all **Number Types** in Python from the below options",
        "code": "",
        "options": ["Decimals", "Complex Numbers", "Sets", "Rationals"],
        "correctAnswer": ["Decimals", "Complex Numbers", "Sets", "Rationals"],
        "explanation": "Number Types in Python are **integers, floating-point, complex numbers, decimals, rationals, sets**  *Boolean is a subclass of the Number Type*",
        "reference": "[Learning Python by Mark Lutz: Number Types]()",
        "githubHandle": "[Mckenney17](https://github.com/Mckenney17)",
        "twitterHandle": "[McKenney'20](https://twitter.com/Oluwarinolasam2)"
    },
    {
        "language": "python",
        "questionType": "single-answer",
        "questionStatement": "In Python, the property that *operation depends on the type of object being operated on* is known as?",
        "code": "",
        "options": ["Polymorphism", "Operator Overloading", "Dynamic Typing", "None"],
        "correctAnswer": "Polymorphism",
        "explanation": "Operation `**a + b**` depends on the type of object **a** and **b** is, if they're String Type: **concatenation** is performed, else if they're Number Types: **addition** is performed. This is known as **Polymorphism**.",
        "reference": "[Learning Python by Mark Lutz: Polymorphism]()",
        "githubHandle": "[Mckenney17](https://github.com/Mckenney17)",
        "twitterHandle": "[McKenney'20](https://twitter.com/Oluwarinolasam2)"
    }
]